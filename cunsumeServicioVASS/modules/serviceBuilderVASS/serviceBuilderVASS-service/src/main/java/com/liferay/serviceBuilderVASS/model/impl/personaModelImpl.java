/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.serviceBuilderVASS.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.serviceBuilderVASS.model.persona;
import com.liferay.serviceBuilderVASS.model.personaModel;
import com.liferay.serviceBuilderVASS.model.personaSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the persona service. Represents a row in the &quot;VASS_persona&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>personaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link personaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see personaImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class personaModelImpl
	extends BaseModelImpl<persona> implements personaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persona model instance should use the <code>persona</code> interface instead.
	 */
	public static final String TABLE_NAME = "VASS_persona";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"cedulaUser", Types.BIGINT},
		{"nombreUser", Types.VARCHAR}, {"fotoUser", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cedulaUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nombreUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fotoUser", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table VASS_persona (uuid_ VARCHAR(75) null,cedulaUser LONG not null primary key,nombreUser VARCHAR(75) null,fotoUser VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table VASS_persona";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persona.cedulaUser ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY VASS_persona.cedulaUser ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long CEDULAUSER_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static persona toModel(personaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		persona model = new personaImpl();

		model.setUuid(soapModel.getUuid());
		model.setCedulaUser(soapModel.getCedulaUser());
		model.setNombreUser(soapModel.getNombreUser());
		model.setFotoUser(soapModel.getFotoUser());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<persona> toModels(personaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<persona> models = new ArrayList<persona>(soapModels.length);

		for (personaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public personaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cedulaUser;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCedulaUser(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cedulaUser;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return persona.class;
	}

	@Override
	public String getModelClassName() {
		return persona.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<persona, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<persona, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<persona, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((persona)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<persona, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<persona, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(persona)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<persona, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<persona, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, persona>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			persona.class.getClassLoader(), persona.class, ModelWrapper.class);

		try {
			Constructor<persona> constructor =
				(Constructor<persona>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<persona, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<persona, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<persona, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<persona, Object>>();
		Map<String, BiConsumer<persona, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<persona, ?>>();

		attributeGetterFunctions.put("uuid", persona::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<persona, String>)persona::setUuid);
		attributeGetterFunctions.put("cedulaUser", persona::getCedulaUser);
		attributeSetterBiConsumers.put(
			"cedulaUser", (BiConsumer<persona, Long>)persona::setCedulaUser);
		attributeGetterFunctions.put("nombreUser", persona::getNombreUser);
		attributeSetterBiConsumers.put(
			"nombreUser", (BiConsumer<persona, String>)persona::setNombreUser);
		attributeGetterFunctions.put("fotoUser", persona::getFotoUser);
		attributeSetterBiConsumers.put(
			"fotoUser", (BiConsumer<persona, String>)persona::setFotoUser);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCedulaUser() {
		return _cedulaUser;
	}

	@Override
	public void setCedulaUser(long cedulaUser) {
		_cedulaUser = cedulaUser;
	}

	@JSON
	@Override
	public String getNombreUser() {
		if (_nombreUser == null) {
			return "";
		}
		else {
			return _nombreUser;
		}
	}

	@Override
	public void setNombreUser(String nombreUser) {
		_nombreUser = nombreUser;
	}

	@JSON
	@Override
	public String getFotoUser() {
		if (_fotoUser == null) {
			return "";
		}
		else {
			return _fotoUser;
		}
	}

	@Override
	public void setFotoUser(String fotoUser) {
		_fotoUser = fotoUser;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, persona.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public persona toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		personaImpl personaImpl = new personaImpl();

		personaImpl.setUuid(getUuid());
		personaImpl.setCedulaUser(getCedulaUser());
		personaImpl.setNombreUser(getNombreUser());
		personaImpl.setFotoUser(getFotoUser());

		personaImpl.resetOriginalValues();

		return personaImpl;
	}

	@Override
	public int compareTo(persona persona) {
		long primaryKey = persona.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof persona)) {
			return false;
		}

		persona persona = (persona)obj;

		long primaryKey = persona.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		personaModelImpl personaModelImpl = this;

		personaModelImpl._originalUuid = personaModelImpl._uuid;

		personaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<persona> toCacheModel() {
		personaCacheModel personaCacheModel = new personaCacheModel();

		personaCacheModel.uuid = getUuid();

		String uuid = personaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			personaCacheModel.uuid = null;
		}

		personaCacheModel.cedulaUser = getCedulaUser();

		personaCacheModel.nombreUser = getNombreUser();

		String nombreUser = personaCacheModel.nombreUser;

		if ((nombreUser != null) && (nombreUser.length() == 0)) {
			personaCacheModel.nombreUser = null;
		}

		personaCacheModel.fotoUser = getFotoUser();

		String fotoUser = personaCacheModel.fotoUser;

		if ((fotoUser != null) && (fotoUser.length() == 0)) {
			personaCacheModel.fotoUser = null;
		}

		return personaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<persona, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<persona, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<persona, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((persona)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<persona, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<persona, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<persona, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((persona)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, persona>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _cedulaUser;
	private String _nombreUser;
	private String _fotoUser;
	private long _columnBitmask;
	private persona _escapedModel;

}